AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  RetentionExportTypes:
    Type: String
    Default: ''
    Description: 'Pipe separated list of retention export types'

  SafeStorageBaseUrl:
     Type: String
     Description: 'Url to the SafeStorage microservice'

  SafeStorageCxId:
    Type: String
    Description: 'SafeStorage Account ID'

  SafeStorageDocTypesPdf10y:
    Type: String
    Description: 'Safe storage doc type for 10 years retention PDF'

  SafeStorageDocTypesPdf5y:
    Type: String
    Description: 'Safe storage doc type for 5 years retention PDF'

  SafeStorageDocTypesPdf120d:
    Type: String
    Description: 'Safe storage doc type for 120 days retention PDF'

  SafeStorageDocTypesZip10y:
    Type: String
    Description: 'Safe storage doc type for 10 years retention Zip'

  SafeStorageDocTypesZip5y:
    Type: String
    Description: 'Safe storage doc type for 5 years retention Zip'

  SafeStorageDocTypesZip120d:
    Type: String
    Description: 'Safe storage doc type for 120 days retention Zip'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'
  
  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic

  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  LogSaverDynamoTableArn:
    Type: String
    Description: 'AuditStorage DynamoDB table ARN'

  LogSaverDynamoTableName:
    Type: String
    Description: 'AuditStorage DynamoDB table name'

  LogSaverExportMaxFileSize:
    Type: String
    Default: '5MB'
    Description: Max export file size

  LogsExporterPolicyArn:
    Type: String
    Description: 'Policy per lettura su bucket log'

  LogsBucketName:
    Type: String
    Description: 'Logs bucket name'

  ScheduleExpression:
    Type: String
    Description: 'Schedule rule expression'

  AppName:
    Type: String
    Default: 'logsaver-be'
    Description: App Name

  ComputeResourceType:
    Type: String
    Default: FARGATE_SPOT
    AllowedValues:
      - FARGATE_SPOT
      - FARGATE
    Description: Enter FARGATE_SPOT or FARGATE.

  MaxvCpus:
    Type: String
    Default: 128
    Description: The maximum number of Amazon EC2 vCPUs that an environment can reach.

  VCPU:
    Type: String
    Default: 0.25
    Description: The number of vCPUs reserved for the container.

  Memory:
    Type: String
    Default: 2048
    Description: The memory hard limit (in MiB) present to the container.

  BatchJobMaxAttempts:
    Type: Number
    Default: 1
    Description: The maximum number of batch job attempts.

  BatchLogGroup:
    Type: String
    Description: Batch log group name

  ManualBatchLogGroup:
    Type: String
    Description: Manual batch log group name

Resources:

  ## Compute Environment
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ServiceRole: !Ref BatchServiceRole
      ComputeEnvironmentName: !Sub '${ProjectName}-${AppName}-compute-environment'
      ComputeResources:
        MaxvCpus: !Ref MaxvCpus
        Type: !Ref ComputeResourceType
        SecurityGroupIds:
          - !Ref BatchSecurityGroup
        Subnets: !Split [",", !Ref SubnetsIds]
      State: ENABLED

  ## Service Role for batch
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  BatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Batch Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"

  ## Job Definition
  ## https://docs.aws.amazon.com/batch/latest/userguide/fargate.html#fargate-job-definitions
  BatchProcessingJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      PropagateTags: true
      JobDefinitionName: !Sub '${ProjectName}-${AppName}-job-definition'
      ContainerProperties:
        Image: !Ref ContainerImageUri
        FargatePlatformConfiguration:
          PlatformVersion: LATEST
        ResourceRequirements:
          - Value: !Ref VCPU
            Type: VCPU
          - Value: !Ref Memory
            Type: MEMORY
        JobRoleArn: !GetAtt "BatchTaskExecutionRole.Arn"
        ExecutionRoleArn: !GetAtt "BatchTaskExecutionRole.Arn"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref "BatchLogGroup"
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: !Sub '${ProjectName}-${AppName}-logs'
        Environment:
          - Name: RETENTION_EXPORT_TYPE
            Value: !Ref RetentionExportTypes
          - Name: PN_SAFESTORAGEBASEURL
            Value: !Ref SafeStorageBaseUrl
          - Name: PN_SAFESTORAGECXID
            Value: !Ref SafeStorageCxId
          - Name: PN_SAFESTORAGEDOCTYPESPDF_10Y
            Value: !Ref SafeStorageDocTypesPdf10y
          - Name: PN_SAFESTORAGEDOCTYPESPDF_5Y
            Value: !Ref SafeStorageDocTypesPdf5y
          - Name: PN_SAFESTORAGEDOCTYPESPDF_120D
            Value: !Ref SafeStorageDocTypesPdf120d
          - Name: PN_SAFESTORAGEDOCTYPESZIP_10Y
            Value: !Ref SafeStorageDocTypesZip10y
          - Name: PN_SAFESTORAGEDOCTYPESZIP_5Y
            Value: !Ref SafeStorageDocTypesZip5y
          - Name: PN_SAFESTORAGEDOCTYPESZIP_120D
            Value: !Ref SafeStorageDocTypesZip120d
          - Name: AWS_REGIONCODE
            Value: !Ref AWS::Region
          - Name: AWS_S3BUCKETNAME
            Value: !Ref LogsBucketName
          - Name: AWS_DYNAMODBTABLENAME
            Value: !Ref LogSaverDynamoTableName
          - Name: LOGSAVER_EXPORTMAXFILESIZE
            Value: !Ref LogSaverExportMaxFileSize
      PlatformCapabilities:
        - FARGATE
      Tags:
        Service: Batch
        Name: JobDefinitionTag
        Expected: MergeTag

  BatchDownloadJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      PropagateTags: true
      JobDefinitionName: !Sub '${ProjectName}-${AppName}-download-job-definition'
      ContainerProperties:
        Image: !Ref ContainerImageUri
        FargatePlatformConfiguration:
          PlatformVersion: LATEST
        ResourceRequirements:
          - Value: !Ref VCPU
            Type: VCPU
          - Value: !Ref Memory
            Type: MEMORY
        JobRoleArn: !GetAtt "BatchTaskExecutionRole.Arn"
        ExecutionRoleArn: !GetAtt "BatchTaskExecutionRole.Arn"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref "ManualBatchLogGroup"
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: !Sub '${ProjectName}-${AppName}-logs'
        Environment:
          - Name: NONOPTIONARGS
            Value: "download"
          - Name: DATE
            Value: "YYYY-MM-DD"
          - Name: FOLDER_DEST
            Value: ""
          - Name: DATE_FROM
            Value: "YYYY-MM-DD"
          - Name: DATE_TO
            Value: "YYYY-MM-DD"
          - Name: PN_SAFESTORAGEBASEURL
            Value: !Ref SafeStorageBaseUrl
          - Name: PN_SAFESTORAGECXID
            Value: !Ref SafeStorageCxId
          - Name: PN_SAFESTORAGEDOCTYPESPDF_10Y
            Value: !Ref SafeStorageDocTypesPdf10y
          - Name: PN_SAFESTORAGEDOCTYPESPDF_5Y
            Value: !Ref SafeStorageDocTypesPdf5y
          - Name: PN_SAFESTORAGEDOCTYPESPDF_120D
            Value: !Ref SafeStorageDocTypesPdf120d
          - Name: PN_SAFESTORAGEDOCTYPESZIP_10Y
            Value: !Ref SafeStorageDocTypesZip10y
          - Name: PN_SAFESTORAGEDOCTYPESZIP_5Y
            Value: !Ref SafeStorageDocTypesZip5y
          - Name: PN_SAFESTORAGEDOCTYPESZIP_120D
            Value: !Ref SafeStorageDocTypesZip120d
          - Name: AWS_REGIONCODE
            Value: !Ref AWS::Region
          - Name: AWS_S3BUCKETNAME
            Value: !Ref LogsBucketName
          - Name: AWS_DYNAMODBTABLENAME
            Value: !Ref LogSaverDynamoTableName
      PlatformCapabilities:
        - FARGATE
      Tags:
        Service: Batch
        Name: JobDefinitionTag
        Expected: MergeTag

  BatchTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${AppName}-taskexec-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ "sts:AssumeRole" ]
      Path: /
      ManagedPolicyArns:
        - !Ref LogsExporterPolicyArn
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:TransactGetItems'
                  - 'dynamodb:TransactWriteItems'
                  - 'dynamodb:UpdateItem'
                Resource:
                  - !Sub "${LogSaverDynamoTableArn}"
                  - !Sub "${LogSaverDynamoTableArn}/*"
  ## JobQueue
  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ComputeEnvironment
      State: ENABLED
      Priority: 1
      JobQueueName: !Sub '${ProjectName}-${AppName}-job-queue'

  ### Enable sending notifications to SNS topic when the job is in failed status.
  BatchBridgeStateRule:
   Type: AWS::Events::Rule
   Properties:
     Description: The EventBridge rule to match Batch state change
     RoleArn: !GetAtt PublishAlarmTopicRole.Arn
     EventPattern:
       source:
         - aws.batch
       detail-type:
         - Batch Job State Change
       detail:
         status:
           - FAILED
         jobDefinition:
          - !Ref BatchProcessingJobDefinition
     State: ENABLED
     Targets:
       - Arn: !Ref AlarmSNSTopicArn
         Id: !Sub "${ProjectName}-logsaver-be"

  ### Event Rule setup ###
  ScheduleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${AppName}-batch-schedule-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ events.amazonaws.com ]
            Action: [ "sts:AssumeRole" ]
      Path: /
      Policies:
        - PolicyName: !Sub '${ProjectName}-${AppName}-batch-schedule-policy'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "batch:SubmitJob"
                Resource: "*"

  PublishAlarmTopicRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${AppName}-publish-alarm-topic-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ events.amazonaws.com ]
            Action: [ "sts:AssumeRole" ]
      Path: /
      Policies:
        - PolicyName: !Sub '${ProjectName}-${AppName}-publish-alarm-topic-policy'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: !Ref AlarmSNSTopicArn

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: !Ref ScheduleExpression
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "JobQueue"
              - "JobQueueArn"
          RoleArn: !GetAtt "ScheduleRole.Arn"
          Id: !Sub '${ProjectName}-${AppName}-TargetBatchQueue'
          BatchParameters:
            JobDefinition: !Ref BatchProcessingJobDefinition
            JobName: !Sub '${ProjectName}-${AppName}-rule-job'
            RetryStrategy:
              Attempts: !Ref BatchJobMaxAttempts

  # CloudWatch metric to filer ERROR - FATAL lines, in Log group
  ErrorFatalLogsMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref BatchLogGroup
      FilterPattern: '?ERROR ?FATAL ?CRITICAL'
      MetricTransformations:
        - MetricValue: 1
          MetricNamespace: "ErrorFatalLogs"
          MetricName: !Sub "${ProjectName}-${AppName}-ErrorFatalMetric"

  # Create alarm
  ErrorFatalLogsMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: ErrorFatalLogsMetricFilter
    Properties:
      AlarmName: !Sub "${ProjectName}-${AppName}-ErrorFatalLogs-Alarm"
      AlarmDescription: "CloudWatch alarm for when LogSaver LogGroup has ERROR or FATAL line."
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      #InsufficientDataActions:
      #  - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1
      MetricName: !Sub "${ProjectName}-${AppName}-ErrorFatalMetric"
      Namespace: "ErrorFatalLogs"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Statistic: Sum
      Threshold: 1

  # Create alarm
  FailedInvocationMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${AppName}-FailedInvocation-Alarm"
      AlarmDescription: "CloudWatch alarm for when LogSaver job failes."
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      #InsufficientDataActions:
      #  - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Name: RuleName
          Value: !Ref BatchBridgeStateRule
      DatapointsToAlarm: 1
      MetricName: "Invocations"
      Namespace: "AWS/Events"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 86400
      Statistic: Sum
      Threshold: 1

  ## Dashboard
  LogsaverBeMicroserviceCloudWatchDashboard:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-cloudwatch-dashboard.yaml"
      Parameters:
        DashboardName: !Sub "${ProjectName}-logsaver-be"
        DynamoDBTableNames: !Join 
          - ',' 
          - - !Ref LogSaverDynamoTableName
        AlarmArns: !Join
          - ','
          - - !GetAtt ErrorFatalLogsMetricAlarm.Arn
            - !GetAtt FailedInvocationMetricAlarm.Arn
        LogGroupsNames: !Join
          - ','
          - - !Ref BatchLogGroup
            - !Ref ManualBatchLogGroup